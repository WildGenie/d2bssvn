js_strict(true);

include('arealinker.dbl');
include('common.dbl');
include('debug.dbl');
include('constants.dbl');

function generatePath(start, dest, x, y, x2, y2) {
	var areas =[];
	if(start != dest) {
		// find the areas between start and dest
		Debug.Write(INFO, 'Starting and destination areas are different,',
				'generating a path...');
		let (nodes = AreaLinker.FindPath(start, dest)) {
			for each(let node in nodes) {
				areas.push(node);
			}
		}
	} else {
		Debug.Write(INFO, 'Starting and destination areas are the same,',
				'we only need to path between those two points');
		let (node = new AreaLink(start)) {
			node.End = dest;
			areas.push(node);
		}
	}
	Debug.Write(INFO, 'The area path generated was', areas.toSource());

	function findPath(area, x, y) {
		var path = getPath(area, me.x, me.y, x, y);
		Debug.Write(INFO, 'Got path', path.toSource());
		return path;
	}

	return (function() {
		for each(let area in areas) {
			if(area.End != dest) {
				// find a path to the exit
				if(area.UseWP) {
					// this is a special case of the objects case
					// find the waypoint
					var wp = getWaypointUnit(area.Start);
					if(!isPreset(wp) && !isUnit(wp))
						throw new Error('Failed to find waypoint');
					// if the waypoint is a preset, path to it
					let (path = findPath(wp.level, wp.realx, wp.realy)) {
						for each(let point in path)
							yield point;
					}
					// yield a special "use waypoint" value
					yield {WP: true, dest: area.End};
				} else if(area.Objects.length > 0) {
					// find the object
					var objects = getPresetUnitsEx(area.Start, TYPE_OBJECT, area.Objects);
					// path to it, yielding each point
					for each(let object in objects) {
						let (path = findPath(object.level, object.realx, object.realy)) {
							for each(let point in path)
								yield point;
						}
						// yield a special "use object" value
						yield {Object: true, classid: object.id};
					}
				} else {
					// find the exit
					let (exits = getArea(area.End).exits) {
						Debug.Write(INFO, 'Got exits', exits.toSource(), 'looking',
							'for exit with id', area.End);
						var exit = null;
						exits.forEach(function(x) {
							if(x.target == area.End)
								exit = x;
							return exit == null;
						});
						if(exit == null)
							throw new Error('Failed to find exit for area id ' + area.End);
						// path to it
						let (path = findPath(exit.level, exit.x, exit.y)) {
							for each(let point in path)
								yield point;
						}
					}
				}
			} else {
				// find a path to the caller's point
				let (path = findPath(dest, x2, y2)) {
					for each(let point in path)
						yield point;
				}
			}
		}
		yield false;
	})();
}
