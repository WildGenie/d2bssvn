js_strict(true);

include('config.dbl');
include('constants.dbl');
include('path.dbl');
include('datastructures.dbl');
include('debug.dbl');

var _CommonGlobalLock = null;

addEventListener('scriptmsg', function(check, obj) {
	if(check == 'lock')
	{
		_CommonGlobalLock = obj;
		removeEventListener('scriptmsg', arguments.callee);
	}
});
var starter = getScript('starter.dbj');
if(starter != undefined)
	starter.send(getScript(true), 'get-lock');
delete starter;

const CLICK_DOWN	= 0x1;
const CLICK_UP		= 0x2;
const CLICK_HOLD	= 0x8;
const CLICK_SINGLE	= CLICK_DOWN|CLICK_UP;
const HAND_RIGHT	= 0x10;
const HAND_LEFT		= 0x20;

const fastRequirements = false;

function display() {
	var msg = '';
	for(var i = 0; i < arguments.length; i++) msg += ' ' + arguments[i];
	var script = getScript(true).name.slice(0, -4);
	print(script+':'+msg);
}
function require(reqs, args) {
	var fname = arguments.callee.caller.name;
	fname = fname.length > 0 ? fname : '[anonymous]';
	Debug.Write(INFO, 'Checking requirements for function', fname);
	if(fastRequirements)
	{
		Debug.Write(INFO, 'Requirements assumed passed!');
		return;
	}

	for(var i = 0; i < reqs.length; i++) {
		let (req = reqs[i], arg = i >= args.length ? undefined : args[i]) {
			if(req.hasOwnProperty('valid') && isFunction(req.valid)) {
				if(req.hasOwnProperty('optional') && req.optional && arg === undefined)
					continue;
				Debug.Write(INFO, 'Checking requirement', req.valid.name);
				if(!req.valid(arg)) {
					Debug.Write(ERROR, 'Failed requirement', req.valid.name);
					throw new Error('Argument ' + (i+1) + (req.optional ? ' (optional)' : '') +
						' of function ' + fname + ' violates the requirement ' +
						req.valid.name + '!');
				}
				Debug.Write(INFO, 'Requirement', req.valid.name, 'passed!');
			}
		}
	}
}

function zip(a, b) {
	require([{valid: isArray}, {valid: isArray}], arguments);
	// [[x, y] for each(let x in a) for each(let y in b)]
	var result = [];
	for(var i = 0; i < a.length && i < b.length; i++)
		result.push([a[i], b[i]]);
	return result;
}

function moveDelay() { modeDelay([2, 3, 6]); }
function castDelay() { modeDelay([10]); }
function areaDelay(area) { doDelay(function() { return me.area!=area; }); }
function neutralDelay() {doDelay(function(){return me.mode!=1&&me.mode!=5;});}
function UIDelay(type, mode) {
	mode = isBoolean(mode) ? mode : true;
	doDelay(function() {
		return mode ? !getUIFlag(type) : getUIFlag(type);
	});
}
function modeDelay(modes) {
	require([{valid: isArray}], arguments);
	doDelay(function() {
		return modes.some(function(e) {
			return me.mode==e;
		});
	});
}
function doDelay(predicate, delay, maxlen) {
	delay = delay || 25;
	maxlen = maxlen || -1;
	require([{valid: isFunction}, {valid: isNumber, optional: true},
			{valid: isNumber, optional: true}], arguments);
	Debug.Write(INFO, 'Delaying for', delay, 'ms apiece until at most', maxlen, 'ms');
	var i = 0;
	do {
		if(maxlen > 0 && i*delay >= maxlen) {
			Debug.Write(INFO, maxlen, 'ms reached, exiting');
			return;
		}
		i++;
		sleep(delay);
	} while(predicate(i) === true);
}

Unit.prototype.__defineGetter__('isInTown', function() {
	switch(this.area) {
		case 1: case 40: case 75: case 103: case 109: return true;
		default: return false;
	}
});

PresetUnit.prototype.__defineGetter__('realx', function() {
	return this.roomx * 5 + this.x;
});
PresetUnit.prototype.__defineGetter__('realy', function() {
	return this.roomy * 5 + this.y;
});

me.hasSkill = function hasSkill(x) {
	return me.getSkillLvl(x, 0) > 0;
};
me.getSkillLvl = function getSkillLvl(x) {
	if(isString(x))
		x = getSkillByName(x);
	return me.getSkill(x, 0);
};
me.castOn = function castOn(hand, shift, unit, id) {
	require([{valid: function validHand(x) { return x === HAND_LEFT || x === HAND_RIGHT; }},
			{valid: isBoolean}, {valid: isUnit},
			{valid: function hasSkill(id) { return me.hasSkill(id); }}], arguments);

	if(isString(id)) id = getSkillByName(id);

	var which = (hand == HAND_LEFT ? 1 : 0);
	if(me.getSkill(2+which) != id) me.setSkill(id, which);
	Debug.Write(INFO, 'Casting', getSkillById(id), '(' + id + ')',
			'on', unit.name, (shift ? 'using' : 'not using'), 'shift');
	click(CLICK_SINGLE|hand, shift, unit);
	castDelay();
};
me.cast = function cast(hand, shift, x, y, id) {
	require([{valid: function validHand(x) { return x === HAND_LEFT || x === HAND_RIGHT; }},
			{valid: isBoolean},
			{valid: function xarg(dx) {
					if(isUnit(dx)) return true;
					else if(isNumber(dx)) return Math.abs(dx-me.x) <= 40;
					return false;
				}},
			{valid: function yarg(y) {
					if(isNumber(x)) return Math.abs(y-me.y) <= 40;
					else if(isUnit(x)) return true;
					return false;
				}},
			{valid: function hasSkill(id) { return me.hasSkill(id); }, optional: true}],
		arguments);

	if(isUnit(x)) id = y;
	if(isString(id)) id = getSkillByName(id);

	var which = (hand == HAND_LEFT ? 1 : 0);
	if(me.getSkill(2+which) != id) me.setSkill(id, which);
	Debug.Write(INFO, 'Casting', getSkillById(id), '(' + id + ')',
			'at (', x, ',', y, ')', (shift ? 'using' : 'not using'), 'shift');
	var args = [CLICK_SINGLE|hand, shift];
	if(isUnit(x))
		args.push(x);
	else args.push(x, y);

	click.apply(this, args);
	castDelay();
};
me.__defineGetter__('isInTown', function() {
	switch(me.area) {
		case 1: case 40: case 75: case 103: case 109: return true;
		default: return false;
	}
});

function click(mode, shift) {
	var point = null;
	var hasUnit = isUnit(arguments[2]);
	var hasPoint = isPoint(arguments[2]);

	if(arguments.length == 3 && (hasPoint || hasUnit))
		point = arguments[2];
	else if(arguments.length = 4 && isNumber(arguments[2]) && isNumber(arguments[3]))
		point = {x: arguments[2], y: arguments[3]};
	else
		throw new Error('Invalid click point');

	var down	= hasFlag(mode, CLICK_DOWN),
		up		= hasFlag(mode, CLICK_UP),
		held	= hasFlag(mode, CLICK_HOLD),
		left	= hasFlag(mode, HAND_LEFT),
		right	= hasFlag(mode, HAND_RIGHT);
	if(left && right)
		throw new Error('Invalid hand selection');
	if(down && held && up)
		throw new Error('Invalid click selection');

	Debug.Write(INFO, 'We will be',
			(down ? 'down' : 'not down'), 'and',
			(up ? 'up' : 'not up'), 'clicking',
			(held ? 'and holding' : 'and not holding'),
			'while clicking at', point.x, ',', point.y,
			(shift ? 'using' : 'not using'), 'shift');
	if(_CommonGlobalLock != null)
		_CommonGlobalLock.lock();
	if(down) {
		var clickMode = (left ? 0 : (right ? 3 : -1));
		if(clickMode == -1) {
			if(_CommonGlobalLock != null)
				_CommonGlobalLock.unlock();
			throw new Error('Invalid click mode');
		}

		var args = [(clickMode + (held ? 1 : 0)), shift];
		if(hasUnit) args.push(point);
		else args.push(point.x, point.y);

		Debug.Write(INFO, (left ? 'Left' : 'Right'), 'down-clicking',
				(hasUnit ? 'on ' + point.name : ''), 'at (', point.x, ',', point.y, ')');
		if(!clickMap.apply(this, args))
			throw new Error('Failed to click map at ' + point.x + ',' + point.y);
		sleep(50);
	}
	if(up) {
		var clickMode = (left ? 2 : (right ? 5 : -1));
		if(clickMode == -1) {
			if(_CommonGlobalLock != null)
				_CommonGlobalLock.unlock();
			throw new Error('Invalid click mode');
		}
		var args = [clickMode, shift];
		if(hasUnit) args.push(point);
		else args.push(point.x, point.y);

		Debug.Write(INFO, (left ? 'Left' : 'Right'), 'up-clicking',
				(hasUnit ? 'on ' + point.name : ''), 'at (', point.x, ',', point.y, ')');
		if(!clickMap.apply(this, args))
			throw new Error('Failed to click map at ' + point.x + ',' + point.y);
		sleep(50);
	}
	if(_CommonGlobalLock != null)
		_CommonGlobalLock.unlock();
}

Unit.prototype.moveTo = function moveToUnit(callback) {
	// only moveTo the object if it's not me!
	if(this.gid != me.gid)
		me.moveTo(this.x, this.y, callback, this.area);
};
PresetUnit.prototype.moveTo = function moveToPreset(callback) {
	me.moveTo(this.realx, this.realy, callback, this.level);
};
Room.prototype.moveTo = function moveToRoom(callback) {
	me.moveTo(this.x, this.y, callback, this.area);
};
Exit.prototype.moveTo = function moveToExit(callback) {
	me.moveTo(this.x, this.y, callback, this.level);
};
Area.prototype.moveTo = function moveToArea(callback) {
	me.moveTo(this.x, this.y, callback, this.id);
};

me.moveTo = function moveTo(x, y, callback, area) {
	callback = isFunction(callback) ? callback : function(){return true;};
	area = area || me.area;
	require([{valid: isNumber}, {valid: isNumber},
			 {valid: isFunction, optional:true}, {valid: isNumber, optional:true}],
		arguments);

	// OPTIMIZATION: if the point is on the screen, just move to it
	if(getDistance(me, x, y) < 20) {
		moveTo([x, y]);
		return;
	} else {
		Debug.Write(INFO, 'Generating path from', me.x+','+me.y, 'to', x+','+y, 'in',
			getBaseStat('levels', area, 'LevelName'));
		let (path = generatePath(me.area, area, me.x, me.y, x, y), point = false) {
			while((point = path.next()) != false)
				moveTo(point);
			path.close();
		}
	}

	function castHelper(h, s, xn, yn) { me.cast(h, s, xn, yn, SKILL_TELEPORT); }

	function moveTo(point, force) {
		force = force || false;
		require([{valid: function validPoint(x) {
				return isArray(x) || x.hasOwnProperty('UseWP');
			}}, {valid: isBoolean, optional: true}], arguments);

		Debug.Write(INFO, 'Moving to point', point.toSource());

		if(point.WP)
			me.useWaypoint(point.dest);
		else if(point.Object)
		{
			me.useObject(point.classid);
		} else {
			var [dx, dy] = point,
				tele = me.hasSkill('teleport') && !me.isInTown,
				dist = Math.floor(getDistance(me, dx, dy)),
				movable = true, //(tele ? hasLoS(me, dx, dy) : isWalkable(me, dx, dy)),
				maxRange = (tele ? 30 : 15),
				moveFunc = (tele ? castHelper : click),
				delayFunc = (tele ? castDelay : moveDelay);

			Debug.Write(INFO, 'We', (tele ? 'are' : 'are not'),
					'using teleport, the distance is', dist);
			do {
				if((dist > maxRange || !movable) && !force) {
					// generate a path and walk that instead
					Debug.Write(INFO, 'Distance too long, trying to recalculate path...');
					let (path = getPath(me.area, me.x, me.y, dx, dy, tele, 5)) {
						for each(let point in path)
							moveTo(point, true);
					}
				}

				tele = me.hasSkill('teleport') && !me.isInTown;
				movable = true; //(tele ? hasLoS(me, dx, dy) : isWalkable(me, dx, dy));
				maxRange = (tele ? 30 : 15);
				moveFunc = (tele ? castHelper : click);
				delayFunc = (tele ? castDelay : moveDelay);

				var args = [(tele ? HAND_RIGHT : CLICK_SINGLE|HAND_LEFT), false, dx, dy];
				moveFunc.apply(this, args);
				delayFunc();

				if(!callback(point))
					break;

				dist = Math.floor(getDistance(me, dx, dy));
				Debug.Write(INFO, 'The distance is now', dist);
			} while(dist > 4);
		}
	}
};

me.useWaypoint = function useWaypoint(id) {
	function areaToPage(id) {
		var areas = [
			[ACT_I,		3,		4,		5,		6,		27,		29,		32,		35],
			[ACT_II,	48,		42,		57,		43,		44,		52,		74,		46],
			[ACT_III,	76,		77,		78,		79,		80,		81,		83,		101],
			[ACT_IV,	106,	107],
			[ACT_V,		111,	112,	113,	115,	123,	117,	118,	129]
		];

		for(var i = 0; i < areas.length; i++)
			for(var j = 0; j < areas[i].length; i++)
				if(areas[i][j] == id)
					return {page: i, button: j};
		return null;
	}
	var wp = getWaypointUnit(me.area);
	if(!isUnit(wp))
		throw new Error('Failed to find waypoint');

	var dest = areaToPage(id);
	if(dest == null)
		throw new Error('Failed to find page and button to click');

	var area = ((dest.page-1)*9)-1+(dest.button) - (dest.page == 5 ? 6 : 0);

	wp.interact();
	UIDelay(UI_WAYPOINT);

	if(!getWaypoint(area))
		throw new Error('Waypoint not found');

	wp.interact(id);
	areaDelay(id);
	me.cancel(0);
	UIDelay(UI_WAYPOINT, false);
	sleep(50);
};

me.useObject = function useObject(classid) {
	var object = getUnit(TYPE_OBJECT, classid);
	if(!isUnit(object))
		throw new Error('Object not found');

	object.interact();
};

function isUnit(obj) {
	return obj != null && obj != undefined &&
		typeof(obj) != 'undefined' && obj.hasOwnProperty('type') &&
		(obj.hasOwnProperty('gid') || obj.hasOwnProperty('id'));
}
function isNPC(obj) {
	return isUnit(obj) && obj.type == TYPE_UNIT &&
			obj.isInTown && obj.hasOwnProperty('name');
}
function isMonster(obj) {
	return isUnit(obj) && obj.type == TYPE_UNIT &&
			!obj.isInTown && obj.hasOwnProperty('name');
}
function isObject(obj) {
	return isUnit(obj) && obj.type == TYPE_OBJECT &&
			obj.hasOwnProperty('x') && obj.hasOwnProperty('y');
}
function isItem(obj) {
	return isUnit(obj) && obj.type == TYPE_ITEM &&
			obj.hasOwnProperty('location') &&
			obj.hasOwnProperty('name');
}
function isMissile(obj) {
	return isUnit(obj) && obj.type == TYPE_MISSILE;
}
function isPreset(obj) {
	return isUnit(obj) && obj.hasOwnProperty('roomx') && obj.hasOwnProperty('roomy');
}
function isArea(obj) {
	return typeof(obj) == 'object' &&
			obj.hasOwnProperty('id') &&
			obj.hasOwnProperty('name') &&
			obj.hasOwnProperty('exits');
}

function getUnits() {
	require([{valid: isNumber, optional: true},
			{valid: function nameOrClassid(x) {
				if(isArray(x))
					require([{valid: nameOrClassid, optional: true}], x);
				return isArray(x) || isString(x) || isNumber(x); }, optional: true},
			{valid: isNumber, optional: true}, {valid: isNumber, optional: true}], arguments);

	var type = arguments[0];
	var names = arguments[1];
	var mode = arguments[2];
	var gid = arguments[3];
	var results = [];

	if(!isArray(names))
		names = [names];

	for each(let name in names)
	{
		var unit = getUnit(type, name, mode, gid);
		do {
			results.push(copyUnit(unit));
		} while(unit.getNext() == true);
	}
	return results;
}

function getPresetUnitsEx(area, type, classids) {
	require([{valid: isNumber}, {valid: isNumber, optional: true},
		{valid: function numberOrArray(x) {
			if(isArray(x))
				require([{valid: numberOrArray}], x);
			return isNumber(x) || isArray(x);
			}, optional: true}], arguments);

	var results = [];

	if(!isArray(classids))
		classids = [classids];

	for each(let classid in classids)
	{
		var units = getPresetUnits(area, type, classid);
		results = results.concat(units);
	}
	return results;
}

function getWaypointUnit(area) {
	require([{valid: isNumber}], arguments);
	const classids = [119,145,156,157,237,238,288,323,324,398,402,429,494,496,511,539];

	// search our local area first
	var wps = getUnits(TYPE_OBJECT, classids);
	if(wps.length == 1)
		return wps[0];

	Debug.Write(INFO, 'No waypoint object found, checking presets');
	wps = getPresetUnitsEx(area, TYPE_OBJECT, classids);
	if(wps.length == 0)
		throw new Error('No waypoint could be found!');
	return wps[0];
}

function isNumber(obj) { return (typeof(obj) == 'number'); }
function isString(obj) { return (typeof(obj) == 'string'); }
function isBoolean(obj) { return (typeof(obj) == 'boolean'); }
function isError(obj) { return obj instanceof Error; }
function isArray(obj) {
	// arrays have a push and pop method, as well as a length and are a
	// typeof object
	// (undefined is also a typeof object... stupid ECMA spec!)
	return	typeof(obj) == 'object' && obj != undefined &&
			obj.hasOwnProperty('length') && isFunction(obj.push) &&
			isFunction(obj.pop);
}
function isFunction(obj) {
	return	typeof(obj) == 'function' &&
			typeof(obj.call) == 'function' &&
			typeof(obj.apply) == 'function';
}

function hasBit(num, bit) { return !!hasFlag((num >> bit), 0x1); }
function hasFlag(num, flag) { return !!((num & flag) == flag); }

function setBit(num, bit) { return setFlag(num, (1 << bit)); }
function setFlag(num, flag) { return (num | flag); }

function clearBit(num, bit) { return clearFlag(num, (1 << bit)); }
function clearFlag(num, flag) { return (num & flag); }

function sleep(milliseconds) {
	// ping/2 + (fps > 30 ? 0 : 30-fps)*10 + delay should be sufficient
	require([{valid: function greaterThanZero(x) { return x > 0; }}], arguments);
	delay(milliseconds + (me.ping/2) + ((me.fps > 30 ? 0 : 30 - me.fps) *10));
}
