js_strict(true);

function Pattern(file)
{
	// read the file this pattern represents
	// patterns are always located in the patterns folder and have a .xml extension
	var filename = 'patterns/' + file + (!hasExt(file) ? '.xml' : '');
	if(!FileTools.exists(filename))
		throw new Error('Invalid pattern');

	var content = '';

	var fhandle = File.open(filename, FILE_READ);
	while(!fhandle.eof) content += fhandle.readLine();
	fhandle.close();

	// remove the xml declaration (bug 336551)
	content = content.replace(/^<\?xml\s+version\s*=\s*(["'])[^\1]+\1[^?]*\?>/, "");
	var pattern = new XML(content);

	if(pattern.name() != 'pattern')
		throw new Error('File is not a pattern (found root node <' + pattern.name() +'>, expected node <pattern>)');

	// pattern is a valid pattern, split it into its constituent parts
	// Patterns will have a set of <area>s nested inside an <areas> node
	// and a set of <action>s nested inside of an <actions> node.
	// Each <area> will have an id representing the id of the area or a
	// name representing the game name of an area (ids are preferred).
	// Each <area> will have a set of (each optional but at least one must
	// be present) <object>s and <monster>s (tiles are considered
	// objects for purposes of what goes where). They will be wrapped in
	// <objects> or <monsters> as necessary.

	var areas = [], actions = [];

	this.__defineGetter__("areas", function () { return areas; });
	this.__defineGetter__("actions", function () { return actions; });

	for each(var area in pattern.areas.*)
	{
		// TODO: process this into an Area object that encapsulates what it
		// represents: traverse from the current area to this one
		// for now, store the area so we can iterate it
		var areaObj = {'id': area.@id, 'objects': [], 'monsters': []};
		areas.push(areaObj);

		for each(var monster in area.monsters.*)
		{
			if(monster.name() != 'monster')
				continue;
			areaObj.monsters.push(attrToObj(monster));
		}

		for each(var object in area.objects.*)
		{
			if(object.name() != 'object')
				continue;
			areaObj.objects.push(attrToObj(object));
		}
	}

	for each(var action in area.actions.*)
	{
		if(action.name() != 'action')
			continue;
		actions.push(attrToObj(action));
	}

	function hasExt(file)
	{
		var lastDot = file.lastIndexOf('.');
		return lastDot != -1 && file.substr(lastDot,  4) == '.xml';
	}

	function attrToObj(obj)
	{
		// TODO: process this into something more reasonable
		var result = {};
		for each(var attr in obj.@*)
			result[attr.name()] = attr;
		return result;
	}
}
