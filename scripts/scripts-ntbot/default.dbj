// default.dbj gets executed upon gamejoin 
include('prototypes/prototypes.js');

var sh = null; 
var ConfigVar = false;
var configHook = false;
var ntbotRevision = 1538;

js_strict(true);

function main() 
{
	sendCopyData(null, "OOG", 0, me.classid+" classid");
	
	while(!me.area ) {
		sendCopyData(null, "OOG", 0,"pregame delay");
		delay(100); 
	}

	var NT_StartTime = getTickCount();

	//print("me.getItemNew.length "+i.length);
	//var a = new Object();		
	//a = new NpcGetItem(me,null,null,null);
	
	print('ÿc2D2BS v'+ version());
	print("ÿc9NTBot by Bobite rev: "+ ntbotRevision); 
	sendCopyData(null, "OOG", 0,"In Game");
	//load("tools/mapper.dbj"); 
	//dumpInventory();

	//addEventListener("itemdrop", dropHandler);
	addEventListener("itemaction", dropHandlerNew);
	addEventListener("keyup", KeyHandler);
	addEventListener("keydown", KeyDownHandler);

	addEventListener("scriptmsg", function(msg, param, param2) {	//taking this out of simon says so anything can use it
		if (msg == "Pause Default")
			NT_Pause =true;
		if (msg == "Resume Default")
			NT_Pause = false;
		if (msg =="Complete")
			currentAction="";
	});

	var ConfigVar = false;
	
	function KeyDownHandler(key){
		if (key == 27){
			delay(200);
			if (!configHook.visible)
				configHook.visible = getUIFlag(9);
		}
		// ConfigVar = new ShowConfig()
		//	ConfigVar.setVisible(true)
	}

	addEventListener("whispermsg", WispMSG);
	addEventListener("gamemsg", GameMSG);


	include("common/HookedControls.js");
	configHook = new TextBox(263,30,275,40,"Config NTBot"); 
	configHook.visible = false; 
	configHook.font = 3; 
	configHook.selectedColor=7;
    configHook.visible = false; 
	configHook.ShowOutline = false;
	
	configHook.clickFunction = 	
		function(){
			me.cancel(0);
			configHook.visible = false;
			
			if (!ConfigVar)
				ConfigVar = new ShowConfig();
			
			ConfigVar.setVisible(true);
		};

	include("config/NTConfig.dbl");
	include("config/NTConfigManager.js");
	include("common/NTCommon.js");
	include("itemlogger.dbl");
	NTC_IncludeLibs(); 
	NTC_IncludeConfig(); 
  	
	addEventListener("gameevent", 
		function(mode, param1, param2, name1, name2)
		{
			for(var i = 0; i<QuitWithLeaderList.length; i++)
			{
				if(QuitWithLeaderList[i] == name1 && (mode == 0 || mode == 1 || mode == 3))
				{
					print("Quitting with leader from list: "+ name1);
					quit();
				}
			}
		}
	);
	
	try{
		NT_LoadConfig();
		NT_Leader.push(leader);
		QuitWithLeaderList.push(leader);
	}catch(error){
		load("libs/config/NTConfig_"+NTC_CharClassToNameList[me.classid]+"_"+me.name+".dbl");
	}
	try{
		NTSI_LoadNIPFiles(); 
	}catch (error){
		print ("Loading to find error" +error);
		load("libs/common/NTAttack.js");
		load("libs/common/NTCommon.js");
		load("libs/config/NTConfigManager.js");
		load("libs/itemlogger.dbl");
	}

	sendCopyData(null, "OOG", 0,"Info "+NTAR_Areas[me.area]);
	
	if(NTConfig_StartDelay > 0); 
		NTC_Delay(NTConfig_StartDelay);
		
	SaveInventory();
	NTA_Initialize();
	NTT_GetCorpses();
	NTSI_PickItems();
  
	//init cuber for utility pick/ clear inventory
	if(NT_EnableCubing){
		try{
			print("Cubing enabled");
			initRecipeList();
			CheckRecipieList();
		}catch(error){
			print(error);
		}
	}
	
	if (NTCreatedConfig){
		if (!ConfigVar){
			ConfigVar = new ShowConfig();	
		}
		
		ConfigVar.setVisible(true);
	}

	if(NTConfig_Script.length > 0) 
	{ 
		NTC_Include("bots/NTLoader.dbl");
		
		load("tools/NTToolsThread.dbj"); 
		load("tools/MiscUtility.dbj");
		
		NTC_Delay(500); 

		NT_Loader();
	}
	
	NTC_Delay(500);

	if(NT_MinGameTime){
		if(getTickCount()-NT_StartTime < NT_MinGameTime *1000){
			var _timeleft = parseInt(((NT_StartTime + ( NT_MinGameTime *1000))-getTickCount())/1000);
			print("ÿc9NTBot: Run finished early, stalling for "+ _timeleft +" seconds (NT_MinGameTime = "+ NT_MinGameTime +")");
			me.overhead("Stalling for "+ _timeleft +" seconds");
			NTTM_CheckAct();
			NTTMGR_TownManager(); 
			while(getTickCount()-NT_StartTime < NT_MinGameTime *1000){
				_timeleft = parseInt(((NT_StartTime + ( NT_MinGameTime *1000))-getTickCount())/1000);
				me.overhead("Stalling for "+ _timeleft +" seconds");
				NTC_Delay(1000);
			}
		}		
	}
	
	sendCopyData(null, "OOG", 0, "Quit:Full Run");
	print("ÿc9NTBot Quit: Run Complete");
	NTC_Delay(500);
	
	quit(); 
}


function dropHandlerNew(id,mode,code,global) 
{ 
	//print("itemaction id:"+id +" mode: "+mode + " code: "+code +" global "+ global);
	if (mode == 0 || mode == 2 || mode == 3){
		for (var i=0 ;  i < Bob_ItemList.length ; i++){
			if (Bob_ItemList[i]==id) return true; //aready there
		}
		Bob_ItemList.push(id);	//,code,x,y,mode);
		return true;
	}
	return true;
} 


function KeyHandler(key)
{
	sendCopyData(null, "OOG", 0,"key press: "+key);

	//Pause/Break key;
	if (key == NT_PauseKey){
		if (getTickCount()-NT_LastPause>200){
			NT_Pause = !NT_Pause;
			NT_LastPause=getTickCount();
			if (NT_Pause){
				print("ÿc;Pausing Bot...(Press 'Pause' again to resume)");
				me.overhead("Pausing Bot...(Press 'Pause' again to resume)");
			} else{
				print("ÿc2Resuming Bot...");
				me.overhead("Resuming Bot...");
			}	
		}
	}
	
	//Page Down key;
	if (key == 34){
		var a = getUnit(4);
		do
		{
			print(a.toSource());
			sendCopyData(null, "OOG", 0,a.toSource() + " "+a.getFlag(0x400000)+ " "+a.getStat(152)+" " );
			//sendCopyData(null, "OOG", 0, NTC_GetBaseStat(0, a.classid, 59) + " " );
			//print(a.getStat(-2).toSource());
			sendCopyData(null, "OOG", 0,"item.getStat(-2).toSource()"+a.getStat(-2).toSource() + " " );
		} while(a.getNext());
	}
	
	//F12 key;
	if (key == 123){
		me.overhead("Reavealing " +NTAR_Areas[me.area]);
		print("Reavealing " +NTAR_Areas[me.area]);
		RevealArea(me.area);
	}
	
	//F11 key;
	if (key == 122) {
		var _target = NTC_GetUnit(0);

		if(_target)
		{
			sendCopyData(null, "OOG", 0,"ShowInventory" );
			do
			{
				var items=_target.getItems();
				if(items){
					for(var i = 0 ; i < items.length ; i++)
					{
						sendCopyData(null, "OOG", 0,"dump "+_target.name+" " +items[i].toSource());
					}
				}
			} while(_target.getNext());
			sendCopyData(null, "OOG", 0,"ShowInventoryEnd" );
		}
	}
	
	//F9 key;
	if(key == 120){
		print("x: "+me.x+" y: "+me.y);
		var unit = getPresetUnits(me.area);
		if(unit){
			for (var j = 0; j < unit.length; j++)
				sendCopyData(null, "OOG", 0,"Dist" +parseInt(getDistance(me.x,me.y,unit[j].roomx*5+unit[j].x,unit[j].roomy*5+unit[j].y) )+"preset id "+unit[j].id+" x: "+(unit[j].roomx*5+unit[j].x)+" y: "+(unit[j].roomy*5+unit[j].y));
		}
	}
	
	if(typeof(scriptKeyHandler) == 'function')
		scriptKeyHandler(key);
		
	if(configHook.visible)
		configHook.visible = getUIFlag(9);

	return true;
}


function GameMSG(str1,str2)
{
	sendCopyData(null, "OOG", 0,str1+": "+str2 );
	print(str1 + " said "+ str2);
	return true;
}


function WispMSG(str1,str2)
{
	sendCopyData(null, "OOG", 0, str1+": "+str2 );
	print(str1 + " whispered "+ str2);
	return true;
}


function ScriptMsg(mode,mes){
	print("Default recived: "+mes);
}


function rnd(min,max){ //keeping up with d2bs 1.5
	if(typeof(rand) == 'function')
		return rand(min,max);
	else	
		return Math.floor(Math.random()*(max-min)+1)+min;
}


function RevealArea(area)
{
	if(area in revealedAreas)
		return;
	revealedAreas.push(area);
	var room = getRoom(area);
	var roomsRevealed = [];
	do {
		if(room == undefined || room.area != area)
			return; // exit when we've finished with the rooms for this area
		if([room.x, room.y] in roomsRevealed)
		{
			roomsRevealed.push([room.x, room.y]);
			room.getNext();
		}
		else
			room.reveal(true);
	} while(room.getNext());
}


function dumpInventory()
{
	var startTime = getTickCount();
	var items=me.getItems();
	if(items){
		sendCopyData(null, "OOG", 0,"dump_Start "+me.name +"@" +me.account);
		for(var i = 0 ; i < items.length ; i++)
		{
			sendCopyData(null, "OOG", 0,"dump " +items[i].toSource());
		}
		sendCopyData(null, "OOG", 0,"dump_End "+me.name +"@" +me.account);
	}
	print ("Dumped to oog in "+((getTickCount())-startTime));
}
