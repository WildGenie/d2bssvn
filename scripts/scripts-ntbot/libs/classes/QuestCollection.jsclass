/**
*	@name		QuestCollection()
*
*	@type		Class
*
*	@desc		Represents a collection of Quest objects
*
*	@properties		Number		activeQuest 
*									- Returns the index of the activeQuest in the QuestCollection
* 
*	@methods		Quest		getActiveQuest()
*									- Returns the Quest object currently marked as the active quest
*
*					Quest[]		getCompleteQuests() 
*									- Returns an Array of all Quest objects marked as completed
*
*					Quest[]		getIncompleteQuests() 
*									- Returns an Array of all Quest objects that have NOT been completed
*
*					Quest		getQuest(actNumber, questNumber)
*									- Returns a the Quest object from the collection with matching actNumber and questNumber
*
*					Quest[]		getQuests() 
*									- Returns an Array of all Quest objects in the collection
*
*					Boolean		setActiveQuest(actNumber, questNumber)
*									- Sets the quest with the matching act and quest numbers as the active quest
*
*	@requires	Quest.jsclass
*
*/

function QuestCollection()
{
	// Private objects
	// Define questList which holds all 'Quest' objects
	var questList = [];
	var questCount = 0;
	var indexOfQuestAct = {};
	
	// Add 'Quest' objects for each act
	for(var actNumber = 1; actNumber <= 5; actNumber++)
	{
		// Create 'Quest' objects for each act.  Act 4 is only act with 3 'Quest' objects;
		if(actNumber == 4)
		{
			for(var questNumber = 1; questNumber <= 3; questNumber++)
			{
				questList.push(new Quest(actNumber, questNumber));
			}
		}
		else
		{
			for(var questNumber = 1; questNumber <= 6; questNumber++)
			{
				questList.push(new Quest(actNumber, questNumber));
			}
		}
		
		// Map Index to 'Quest' object in 'indexOfQuestAct' object;
		indexOfQuestAct[actNumber +''+ questNumber] = questCount;
		
		// Increase quest counter;
		questCount++;
	}
	
	
	
	// Public objects
	// QuestCollection.activeQuest - returns the index of the currently active quest;
	this.activeQuest = 0;
	
	
	
	// QuestCollection.getActiveQuest - returns the Quest object that is currently marked as the activeQuest;
	this.getActiveQuest =
			function getActiveQuest()
			{
				return questList[activeQuest];
			};
			
			
			
	// QuestCollection.getQuests() - returns an Array of all 'Quest';
	this.getQuests = 
			function getQuests()
			{ 
				// Return array of 'Quest' objects that have been completed;
				if(arguments[0] == 'complete')
				{
					var completeQuestList = [];
					
					for(var i = 0; i < questList.length; i++)
					{
						if(questList[i].completed)
							completeQuestList.push(questList[i]);
					}
					
					return completeQuestList;
				}
				
				// Return array of 'Quest' objects that have NOT been completed;
				if(arguments[0] == 'incomplete')
				{
					var incompleteQuestList = [];
					
					for(var i = 0; i < questList.length; i++)
					{
						if(!questList[i].completed)
							incompleteQuestList.push(questList[i]);
					}
					
					return incompleteQuestList;
				}
				
				// Return array of all 'Quest' objects in collection;
				return questList;
			};
			
			
			
	// QuestCollection.getCompleteQuests() - returns an Array of all 'Quest' objects marked as completed;
	this.getCompleteQuests = 
			function getCompleteQuests()
			{ 
				return getQuests('complete'); 
			};
	
	
	
	// QuestCollection.getIncompleteQuests() - returns an Array of all 'Quest' objects that have NOT been completed;
	this.getIncompleteQuests = 
			function getIncompleteQuests()
			{ 
				return getQuests('incomplete'); 
			};
			
			
			
	// QuestCollection.getQuest(actNumber, questNumber) - returns a the Quest object from the collection with matching actNumber and questNumber;
	this.getQuest = 
			function getQuest(actNumber, questNumber)
			{
				// Handle arguments
				if(arguments.length != 2 && !actNumber.isNumber && !questNumber.isNumber)
				{
					print('QuestCollection.getQuest() failed, requires valid actNumber and questNumber arguments');
					return false;
				}
				
				return questList[indexOfQuestAct[actNumber +''+ questNumber]];
			};
			
			
			
	// QuestCollection.setActiveQuest(actNumber, questNumber) - sets the Quest with the matching actNumber and questNumber as the activeQuest;
	this.setActiveQuest =
			function setActiveQuest(actNumber, questNumber)
			{
				// Handle arguments
				if(arguments.length != 2 && !actNumber.isNumber && !questNumber.isNumber)
				{
					print('QuestCollection.getActiveQuest() failed, requires valid actNumber and questNumber arguments');
					return false;
				}
				
				this.activeQuest = indexOfQuestAct[actNumber +''+ questNumber];
				return true;
			};
}