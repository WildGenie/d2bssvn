//include("YAMB/common/YAM-Common.dbl");
//include("YAMB/common/YAM-Attack.dbl");

var pid =   new Text();
var rid =   new Text();
var ptype = new Text();
var pdist = new Text();
var pnumb = new Text();

var XY_sh       = new Text();
var MouseXY_sh       = new Text();
var Mon_sh       = new Text();
var Mon_cls       = new Text();
var Mon_mode       = new Text();
var Mon_spec       = new Text();
var Mon_Parent       = new Text();

var Col0 = new Text();
var Col1 = new Text();
var Col2 = new Text();
var Col3 = new Text();
var Col4 = new Text();
var Col5 = new Text();
var Col6 = new Text();
var Col7 = new Text();
var Col8 = new Text();
var Col9 = new Text();
var Col10 = new Text();
var Col11 = new Text();
var Col12 = new Text();
var Col13 = new Text();
var Col14 = new Text();
var Col15 = new Text();

DarienHook(Col0,10,73,0,8," ");
DarienHook(Col1,10,90,0,8," ");
DarienHook(Col2,10,105,0,8," ");
DarienHook(Col3,10,120,0,8," ");
DarienHook(Col4,10,135,0,8," ");
DarienHook(Col5,10,150,0,8," ");
DarienHook(Col6,10,165,0,8," ");
DarienHook(Col7,10,180,0,8," ");
DarienHook(Col8,10,195,0,8," ");
DarienHook(Col9,10,210,0,8," ");
DarienHook(Col10,10,225,0,8," ");
DarienHook(Col11,10,240,0,8," ");
DarienHook(Col12,10,255,0,8," ");
DarienHook(Col13,10,270,0,8," ");
DarienHook(Col14,10,285,0,8," ");
DarienHook(Col15,10,300,0,8," ");

DarienHook(XY_sh,10,315,0,8," ");
DarienHook(MouseXY_sh,10,327,0,8," ");
DarienHook(Mon_sh,10,339,0,8," ");
DarienHook(Mon_cls,10,351,0,8," ");
DarienHook(Mon_mode,10,363,0,8," ");
DarienHook(Mon_spec,10,375,0,8," ");
DarienHook(Mon_Parent,10,402,0,8," ");
    

    
function YAM_KeyUpManager(keyup) {
	sendCopyData(null, "OOG", 0,"yam keyupmanager "+keyup );
    print("Key just pressed: " + keyup);
	if(getUIFlag(0x05)==1 && keyup != 19)
		return;
	switch (keyup) {
		case 222: { load("bots/YAMB.dbj"); break; } // '
        case 221: break; //  ] 
        case 220: { print("logging to file"); returnQuest(); break; }  // \ - reserved for Bodycount screenhooks
        case 219: break;   // [ 
        case 186: break;   // ;
        case 120: break;   // F9
        case 121: break;   // F10
        case 122: { unitHooks(1,15,20); break; }   // F11
        case 123: { listPresetUnits(me.area,1,20); break; }  // F12
            break;
    }
}



function FB_gamemsgHandler (msg, c) {
    var _msg = YAM_parseGameMsg (msg, c);
    print("Sender " + _msg[0] + " cmd: " + _msg[1] + " params: " + _msg[2] + " params2: " + _msg[3]);
}

//for name enter a text object or enter a name as a string and it will create an object with that name
// align 0,1,2 = right, left, center
function DarienHook(name,X,Y,Color,Font,string, align, click, hover) {
    if(typeof name == "string") {
        name = new Text (string, X, Y, Color, Font, align, null, click, hover);
        return name;
    } else {
        name.x      = X;
        name.y      = Y;
        name.color  = Color;
        name.font   = Font;
        if(arguments.length > 5) name.text = string;
        if(arguments.length > 6) name.align = align;
        if(arguments.length > 7 && typeOf(click) == "function") click();
        if(arguments.length > 8 && typeOf(hover) == "function") hover();
    }
    return false;
}

function clickHandler() {
    print("Click");
}

function main() {

    addEventListener("keyup",     YAM_KeyUpManager  );
    //addEventListener("chatmsg",   FB_gamemsgHandler);//regular chat "tp up"
        
    //var test = new Text("this is my text test", 450, 450, 2);

    print("ÿc3DevTools Loaded!ÿc0");

	while(1) {
    
		XY_sh.text = "My x,y: " + me.x + "," + me.y;
		var mouseCoords = getMouseCoords();
		var mx = parseInt(me.x + ((mouseCoords[0]-400)*13/400) ,10);
		var my = parseInt(me.y + ((mouseCoords[1]-300)*20/300) ,10);
		MouseXY_sh.text = "Mouse: " + mx + "," + my;
        //var mouseDist = getRange(me, mx, my);
        //print("Mouse is at Distance: " + mouseDist);
        
        //if(!Sc_DoneQuest(1,3)) print("I need to save cain and open trist");
        //else print("I've already saved cain");
        
        //var wp = getClosestWP(3);
        //print("Closest wp is " + wp);
        
        
        unitHooks(1,20);
        //collisionHooks();
        //listPresetUnits(me.area,5);
        
        
        delay(200);
        
        

	}
}



function getClosestWP(wpnum) {
    for(var n=wpnum; n >= 0; n--) {
        if(getWaypoint(n)) return n;
    }
    dprint("I don't have any waypoints",1)
    return 0;
}
function Sc_DoneQuest(act, quest) // taken from Scavenger
{
    var qarray = [1,2,4,5,3,6,9,10,11,12,13,14,20,19,18,17,21,22,25,27,26,0,0,0,29,30,31,32,33,34];
	var qnum = quest-1+(act-1)*6;
	return me.getQuest(qarray[qnum],0);

}

function listPresetUnits(area,type,_dist) {
    if(arguments.length < 1) area = me.area;
    if(arguments.length < 2) type = null;
    if(arguments.length < 3) _dist = 100000000;
    
    var Darien_PresetUnits = getPresetUnits(area,type,null,null);
	print("Listing preset units for area: " + area);
	if(!Darien_PresetUnits) { print("WTF"); return false; }
    DarienHook(pnumb,10,480,0,8,"Number of Preset Units: " + Darien_PresetUnits.length);
    //print("Number of Preset Units: " + Darien_PresetUnits.length);
	
	for (var p=0; p < Darien_PresetUnits.length; p++) {			
            var px = (Darien_PresetUnits[p].roomx * 5) + Darien_PresetUnits[p].x;
            var py = (Darien_PresetUnits[p].roomy * 5) + Darien_PresetUnits[p].y;
            var pDist = getRange (me,px,py);
            if(pDist > _dist) continue;
            var pRoom = getRoom(me.area,px,py);
            //print("Preset classid: " + Darien_PresetUnits[p].id + ", Preset Type: " + Darien_PresetUnits[p].type + ", Dist: " + pDist);
            DarienHook(pid,10,420,0,8,"Preset classid: " + Darien_PresetUnits[p].id );
            DarienHook(rid,10,435,0,8,"Preset room number: " + pRoom.number);
            DarienHook(ptype,10,450,0,8,"Preset Type: " + Darien_PresetUnits[p].type);
            DarienHook(pdist,10,465,0,8,"Dist: " + pDist);
            delay(1000);
    }
    return true;
}


function getAllUnits (type,_id,area) {

	if(!area) area = me.area;
    if(!_id)  _id  = null;
    if(!type) type = null;
	var Darien_PresetUnits = getPresetUnits(area,type,_id,null);
	var allUnits = new Array();
	var pp=0;
	
	if(!Darien_PresetUnits) return false;
	
	for (var p=0; p < Darien_PresetUnits.length; p++) {
			
		//if(!type) var type = Darien_PresetUnits[p].type;
		//if(Darien_PresetUnits[p].type == type) {
		
			print("Preset classid: " + Darien_PresetUnits[p].id);
			
			var FarUnitX = (Darien_PresetUnits[p].roomx * 5) + Darien_PresetUnits[p].x;
			var FarUnitY = (Darien_PresetUnits[p].roomy * 5) + Darien_PresetUnits[p].y;
			
			allUnits[pp] = new Array();
			
			allUnits[pp].push(FarUnitX);
			allUnits[pp].push(FarUnitY);
			
			pp++;
		//}
	}
	
	if(!type) var units = "Preset Units";
	else {
		switch(type) {
			case 0: var units = "Players"; break;
			case 1: var units = "Monsters"; break;
			case 2: var units = "Objects"; break;
			case 3: var units = "Missles"; break;
			case 4: var units = "Items"; break;
			case 5: var units = "Tiles"; break;		
		}
	}
	
	if(allUnits.length >= 1) dprint(allUnits.length + " " + units + " found",3);	
	
	return allUnits;
}



function collisionHooks() {
    if (checkCollision(me,unit,0))  { Col0.text = "Collision 0: 1";   } else { Col0.text = "Collision 0: 0";   }
    if (checkCollision(me,unit,1))  { Col1.text = "Collision 1: 1";   } else { Col1.text = "Collision 1: 0";   }
    if (checkCollision(me,unit,2))  { Col2.text = "Collision 2: 1";   } else { Col2.text = "Collision 2: 0";   }
    if (checkCollision(me,unit,3))  { Col3.text = "Collision 3: 1";   } else { Col3.text = "Collision 3: 0";   }
    if (checkCollision(me,unit,4))  { Col4.text = "Collision 4: 1";   } else { Col4.text = "Collision 4: 0";   }
    if (checkCollision(me,unit,5))  { Col5.text = "Collision 5: 1";   } else { Col5.text = "Collision 5: 0";   }
    if (checkCollision(me,unit,6))  { Col6.text = "Collision 6: 1";   } else { Col6.text = "Collision 6: 0";   }
    if (checkCollision(me,unit,7))  { Col7.text = "Collision 7: 1";   } else { Col7.text = "Collision 7: 0";   }
    if (checkCollision(me,unit,8))  { Col8.text = "Collision 8: 1";   } else { Col8.text = "Collision 8: 0";   }
    if (checkCollision(me,unit,9))  { Col9.text = "Collision 9: 1";   } else { Col9.text = "Collision 9: 0";   }
    if (checkCollision(me,unit,10)) { Col10.text = "Collision 10: 1"; } else { Col10.text = "Collision 10: 0"; }
    if (checkCollision(me,unit,11)) { Col11.text = "Collision 11: 1"; } else { Col11.text = "Collision 11: 0"; }
    if (checkCollision(me,unit,12)) { Col12.text = "Collision 12: 1"; } else { Col12.text = "Collision 12: 0"; }
    if (checkCollision(me,unit,13)) { Col13.text = "Collision 13: 1"; } else { Col13.text = "Collision 13: 0"; }
    if (checkCollision(me,unit,14)) { Col14.text = "Collision 14: 1"; } else { Col14.text = "Collision 14: 0"; }
    if (checkCollision(me,unit,15)) { Col15.text = "Collision 15: 1"; } else { Col15.text = "Collision 15: 0"; }
}


function unitHooks(type,_dist) {
    if(arguments.length < 2) _dist = 100000000;
    
    var unit = getUnit(type);
    if (unit) do {
        if(getRange(unit) > _dist) continue;
        Mon_sh.text   = "Name:     " + ((unit.type == 5) ? "Tile" : unit.name);
        Mon_cls.text  = "ClassId:  " + unit.classid;
        Mon_mode.text = "Mode:     " + unit.mode;
        Mon_spec.text = (typeof(unit.spectype) != "undefined") ? ("Spectype: " + unit.spectype) : " ";
        //if(unit.getParent()) Mon_Parent.text = (unit.name + " is a minion of " + unit.getParent().name);
        //print("item code: " + unit.code);
        delay(1500);
    } while (unit.getNext());
}

function InTown(who) {
	while (who.area == 0) { delay(50); }
	return ((who.area == 1 || who.area == 40 || who.area == 75 || who.area == 103 || who.area == 109) ? true : false);
}

function getRange (a,b,c,d) {
        if (arguments.length == 1) { var obj1x = me.x; var obj1y = me.y; var obj2x = a.x; var obj2y = a.y; }
        if (arguments.length == 2) { var obj1x = a.x;  var obj1y = a.y;  var obj2x = b.x; var obj2y = b.y; }
        if (arguments.length == 3) { var obj1x = a.x;  var obj1y = a.y;  var obj2x = b;   var obj2y = c;   }
        if (arguments.length == 4) { var obj1x = a;    var obj1y = b;    var obj2x = c;   var obj2y = d;   }

        return (parseInt (Math.sqrt (Math.pow (obj1x-obj2x, 2) + Math.pow (obj1y-obj2y, 2))));
}


function YAM_parseGameMsg (who, msg) {
	var parsedMsg = new Array();
	var msg1      = null;
    
	var Firstword = msg.substring(0, msg.indexOf(" "));
    var rest = msg.substring(msg.indexOf(" ")+1, msg.length);
    var Secondword= rest.substring(0, rest.indexOf(" "));
    var darest = rest.substring(rest.indexOf(" ")+1, rest.length);
    var Thirdword = darest.substring(0, rest.length);

		parsedMsg[0] = who;
		parsedMsg[1] = Firstword;
		parsedMsg[2] = Secondword;
		parsedMsg[3] = Thirdword;
	
	return parsedMsg;
}

function isMonsterBlocking(mon,x,y) {
	var meMonDist = getRange(me,mon);
	if (meMonDist > 5) return false;
	
	/*
	var  meStepDist = getXYORange(x,y,me);
	var destMonDist = getXYORange(x,y,mon);
	
	if(meMonDist < meStepDist && 
	 destMonDist < meStepDist &&
	   meMonDist < 3) return mon;
	*/
	
	if(isBetween(x,y,mon)) return mon;
	return false;
}

function isBetween(a,b,c,d) {

	//(destx,desty,objX,objY)
	if(arguments.length == 4) {
		var phi = Math.round((b - me.y/a - me.x)*1000)/1000;
		var obj_rat = Math.round((d - me.y/c - me.x)*1000)/1000;
		var dest_range  = getXYORange(a,b,me);
		var obj_range = getXY2Range(a,b,c,d);
	}
	
	//(destx,desty,obj)
	else if(arguments.length == 3) {
		var phi = Math.round((b - me.y/a - me.x)*1000)/1000;
		var obj_rat = Math.round((c.y - me.y/c.x - me.x)*1000)/1000;
		var dest_range  = getXYORange(a,b,me);
		var obj_range = getXYORange(a,b,c);
	}
	
	//(destObj,obj)
	else {
		var phi = Math.round((a.y - me.y/a.x - me.x)*1000)/1000;
		var obj_rat = Math.round((b.y - me.y/b.x - me.x)*1000)/1000;
		var dest_range  = getRange(a,me);
		var obj_range = getRange(a,b);
	}
	//print("My distance to my Destination: " + my_range);
	//print("Object distance to Destination: " + obj_range);
	
	var vect_diff = Math.abs(phi - obj_rat);
	var acceptable = Math.abs(phi/100); //was 10
	
	//print("phi " + phi);
	//print("Obj_Rat " + obj_rat);
	//print("vect diff " + vect_diff);
	//print("acceptable " + acceptable);
	
	if(dest_range  >= obj_range && vect_diff <= acceptable) {
		if(arguments.length == 3) {
            dprint(c.name + " is in my way!!",9);
            if(c.name == "Barrel" || c.name == "barrel") DC_OpenChest(c);
        }
		if(arguments.length == 2) {
            dprint(b.name + " is in my way!!",9);
            if(b.name == "Barrel" || b.name == "barrel") DC_OpenChest(b);
        }
		return true;
	} //else dprint("Don't need to open this door");
	return false;
}

function MoveToRandom(rad) {
    do {
        var rndX = Math.floor (me.x + rnd(-rad,rad));
        var rndY = Math.floor (me.y + rnd(-rad,rad));
    } while (checkCollision(me.area, rndX, rndY, 1));
    
    dprint("Random Move: " + rndX + "," + rndY,2);
    me.move(rndX, rndY);
}

function ValidDoorObject(thing,x,y) { 
	
	if(!thing) return false;
	if(thing.mode == 2) return false;
	if(getRange(me,thing) > 6) return false;
    if(arguments.length > 1 && !isBetween(x,y,thing)) return false;
    
	if(thing.name == "Door") return true;
	if(thing.name == "door") return true;
    if((IsBlocked(thing,0) || IsBlocked(thing,12)) && !useTele) {
        //print("can't walk to " + thing.name);
        return false;
    }
	switch(thing.classid) {	
		case 25:
		case 27:
			return true;
	}
	
	
	return false;
	
}

function openDoor(x,y) {

    if(useTele) return true;    

    //me.move(x, y);
    //delay(100);
    //while(me.mode == 2 || me.mode == 3) delay(50);
    if(getXYORange(x,y,me) <= 2) return true;    

    //if you we can't walk to next point look for door       
	var door = returnClosestDoor(me,10,null,0,x,y);
	if(door) {
	    var sx = me.x;
        var sy = me.y;
        
		var door_dist = getRange(me,door)-1;
            
        var monster = getMonster(me,door_dist);
		if(monster) { dprint("kill monster before open door"); attack(monster); }

		dprint("no close monsters");
        
        //if door is blocking path, or walking is blocked, then open door
        // 11-most doors, 4-some doors, 0-walk, 10-objects(including doors)
        if(IsBlocked(x,y,4) || IsBlocked(x,y,11) || IsBlocked(x,y,0)) {
            ignoreAttack=true;
        
            dprint("Open Door",1);
            var doorTrys=0;
            while(door.mode == 0) {
                if(getRange(me,door) > 4) safeWalk(door.x,door.y);                

                var tim=0;
                while(door && door.mode == 0 && tim < 4) {
                    door.interact();
                    delay(500);
                    tim++;
                }
                if(door.mode == 0) {
                    dprint("I could be lagging.  Open a portal, if it's far away we're lagging!",1);
                    var lag_portal = Sc_CastTP();
                    if(lag_portal) {
                        dprint("Move to Portal",3);
                        MoveTo(lag_portal.x,lag_portal.y);
                        if(getRange(me,lag_portal) > 7) {
                            dprint("Path to Portal",3);                                
                            moveto(lag_portal.x,lag_portal.y);
                        }
                        dprint("Move to door",3);
                        MoveTo(door.x,door.y);
                        if(getRange(me,door) > 7) {
                            dprint("Path to door",3);
                            moveto(door.x,door.y);
                        }
                        var tim=0;
                        while(door && door.mode == 0 && tim < 8) {
                            dprint("OPEN!",1);
                            door.interact();
                            delay(500);
                            tim++;
                        }
                    } else dprint("Damn! where is my portal!",1);
                }
                if(door.mode == 0) {
                    dprint("Damn Door!",1);
                    var randxx = rnd(-2,2);
                    var randyy = rnd(-2,2);
                    var xxdist= Math.floor(door.x - me.x);
                    var yydist=  Math.floor(door.y - me.y);
                    oStepx = me.x - xxdist;
                    oStepy = me.y - yydist;
                    dprint("Random Step",3);
                    safeWalk(oStepx + randxx,oStepy + randyy);
                    dprint("Return to original spot",3);
                    safeWalk(sx,sy);
                }
                if(doorTrys && door.mode == 0) dprint("Sigh... Lets try this again! " + doorTrys,2);
                //door = returnClosestDoor(me,10,null,0);
                doorTrys++;
            }
        } else dprint("This door isn't directly blocking our path!",8);          
	}
	ignoreAttack=false;
    return true;
}

function return_Crossbow_or_Bow(weapon) {
	
	switch(weapon.code) {
		case "sbw":
		case "hbw":
		case "lbw":
		case "cbw":
		case "sbb":
		case "lbb":
		case "swb":
		case "lwb":
		case "8sb":
		case "8hb":
		case "8lb":
		case "8cb":
		case "8s8":
		case "8l8":
		case "8sw":
		case "8lw":
		case "6sb":
		case "6hb":
		case "6lb":
		case "6cb":
		case "6s7":
		case "6l7":
		case "6sw":
		case "6lw":
			return "Arrows"; 
	}
	
	switch(weapon.code) {
		case "lxb":
		case "mxb":
		case "hxb":
		case "rxb":
		case "8lx":
		case "8mx":
		case "8hx":
		case "8rx":
		case "6lx":
		case "6mx":
		case "6hx":
		case "6rx":
			return "Bolts"; 
	}
	
	if(weapon.itemtype == 85) return "Arrows"; 
	if(weapon.itemtype == 35) return "Bolts";
	if(weapon.itemtype == 27) return "Arrows";
	
	return 0;
}

function RangedWeaponCheck() {
	myWeapon = getUnit(4,null,1);

	if(myWeapon) do {
		if(myWeapon.getParent() && myWeapon.getParent().name == me.name && (myWeapon.itemloc == 4 || myWeapon.itemloc == 5) &&
		(return_Crossbow_or_Bow(myWeapon) == "Arrows" || return_Crossbow_or_Bow(myWeapon) == "Bolts")) {
			weaponloc = myWeapon.itemloc;
			return true;
		}
	}while(myWeapon.getNext(null,1));
	return false;
}

function WeaponCheck() {
	myWeapon = getUnit(4,null,1);

	if(myWeapon) do {
		if(myWeapon.getParent() && myWeapon.getParent().name == me.name && (myWeapon.itemloc == 4 || myWeapon.itemloc == 5) &&
		myWeapon.itemtype != 51 && myWeapon.itemtype != 2 &&  myWeapon.itemtype != 70 && myWeapon.code != "aqv" && 
		myWeapon.code != "cqv") {
			weaponloc = myWeapon.itemloc;
			return myWeapon;
		}
	}while(myWeapon.getNext(null,1));
	return false;
}

function returnQuest() { 
    //me.getQuest(9,33); to take portal to Arcane.
    //me.getQuest(10,16); and (10,61)to take portal to canyon.
    //me.getQuest(16,84); and (16,93)to take portal to durance 2.


    var file= File.open("output/DevToolsinfo.txt",FILE_WRITE);
    
    file.write(new Date() + "\n");
	file.write(" -------========START LOOP=======-----------\n");
	file.write("\n");
    
	for(var x=3; x < 5; x++) {
		for(var y=0; y < 20; y++) {
			file.write(" me.getQuest("+ x + ", " + y + ") = " + me.getQuest(x,y) + "\n");  //  \t is tab \n is enter
            file.write("");
		}
		delay(10);
	}
    
    file.write(new Date() + "\n");
	file.write(" -------========NEXT LOOP=======-----------\n");
	file.write("\n");
    file.close();
}


function funny() {
    playSound(3266);
    delay(400);
    playSound(1806);
    delay(400);
    playSound(3739);
    delay(400);
    playSound(1806);
    delay(800);
    playSound(3271);
    delay(800);
    playSound(1807);
    delay(800);
    me.overhead("funny sound");
    playSound(1806);
    delay(400);
    playSound(3739);
    delay(400);
    playSound(1806);
    delay(400);
    playSound(3739);
    delay(400);
    playSound(1807);
    delay(400);
    playSound(2915);
    delay(400);
    playSound(1807);
    delay(400);
    playSound(2917);
    delay(800);
    playSound(1806);
    delay(800);
    playSound(2916);
    delay(800);
    playSound(1816);
    delay(800);
    playSound(2916);
    delay(800);
    playSound(1818);
    delay(800);
}
