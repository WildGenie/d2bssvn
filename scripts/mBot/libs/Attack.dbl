var Range = {Close:0, LOS:1};

var Attack = new function () {
	this.minSkill = 15;
	
	this.isValidMonster = function(Mon) {
	
		if (!Mon)
			return false;
			
		if ((Mon.hp == 0) || (Mon.mode == 12) || (Mon.mode == 0))
			return false;
			
		if (Mon.getParent ()) //Check if unit has a owner, if so, it's going to be a summon.
			return false;
			
		if ((Mon.getStat(172) == 2) || Mon.getState(105) == 0) //Check Monsters Alignment
			return false;
			
		if ((Mon.area == 1) || (Mon.area == 70) || (Mon.area == 75) || (Mon.area == 103) || (Mon.area == 109))//Is Monster in Town
			return false;
			
		if ((((Mon.classid >= 110) && (Mon.classid <= 113)) || (Mon.classid == 608))  && (Mon.mode == 8))// Ignore flying scavengers
			return false;
			
		if ((Mon.classid == 68) && (Mon.mode == 14))// Ignore burrowing maggots
			return false;
		
		if (((Mon.classid == 258) || (Mon.classid == 261)) && (Mon.mode == 14))// Ignore submerged WaterWatchers		
			return false;

		var BadIDs = new Array(326, 327, 328, 329, 330, 410, 411, 412, 413, 414, 415, 416, 366, 406,
								351, 352, 353, 266, 408, 516, 517, 518, 519, 522, 523, 543, 543, 545);
		
		for(var n = 0; n < BadIDs.length; n++) {
			if (Mon.classid == BadIDs[n]) {
				return false;
			}
		}
		
		if ((Mon.name == "an evil force") || (Mon.name == "dummy")) //Check name to ensure valid
			return false;
		
		//nothing else to check
		return true;
	}	
	
	this.distance = function (unit) {
		return getDistance(me, unit);
	}
	
	this.hammerdinAttack = function(unit, nSkill) {
		Pather.monsterPath(unit, nSkill.Range);
		
		while(this.isValidMonster(unit)) {
			this.update(unit);
			if (this.distance(unit) > 5)
				Pather.monsterPath(unit);
				
			mBot.setSkill(Skill.BlessedHammer, Hand.Left);
			mBot.setSkill(Skill.Concentration, Hand.Right);
			
			mBot.cast(Skill.BlessedHammer, Hand.Left, unit);
		}
		this.update(unit);
	}
	
	this.oneSkillAttack = function(unit, nSkill) {
		Pather.monsterPath(unit, nSkill.Range);
		
		
		while(this.isValidMonster(unit)) {
			this.update(unit);
			mBot.cast(nSkill.Id, Hand.Right, unit);
		}
		this.update(unit);
	}
	
	this.update = function(unit) {
		if (!this.isValidMonster(unit))
			return me.overhead(unit.name + "(Dead)");
		var nPercent = Math.round(unit.hp/unit.hpmax * 100);
		var nColor = 2;
		if (nPercent >= 50 && nPercent <= 75)
			nColor = 9;
		if (nPercent >= 25 && nPercent <= 50)
			nColor = 8;
		if (nPercent < 25)
			nColor = 1;
		me.overhead(unit.name + "(ÿc" + nColor + Math.round(unit.hp/unit.hpmax * 100) + "%)");
		return;
	}
	
	this.attack = function(unit) {
		for (var n = 0; n < this.skillTypes.length; n++) {
			if (me.getSkill(this.skillTypes[n].Id, 3) >= this.minSkill)
				return this.skillTypes[n].Func.call(this, unit, this.skillTypes[n]);
		}
		return false;
	}
	
	this.skillTypes = [{Name:"Fireball", Id:Skill.FireBall, Range:Range.LOS, Func:this.oneSkillAttack},
						{Name:"Hammerdin", Id:Skill.BlessedHammer, Range:Range.Close, Func:this.hammerdinAttack}]
}