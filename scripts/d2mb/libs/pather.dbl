var Pather = new function () {

	this.exitPath = function(exitAreaId, goThru) {
		var exit = getExits(getArea(me.area));
		for (var n in exit) {
			if (exit[n].id == exitAreaId) {
				var oldArea = me.area;
				this.moveTo(exit[n]);
				
				if (goThru) {
					if (exit[n].type == 2) {
						return this.takeTile(exit[n].tileid);
					}
					
					var otherExit = getExits(getArea(exitAreaId));
					print(otherExit.toSource ());
					for (var l = 0; l < otherExit.length; l++) {
						if (otherExit[l].id == oldArea) {
							this.useDoors ();
							while(oldArea == me.area)
							clickMap(ClickType.Left.Down, Shift.Off, otherExit[l].x, otherExit[l].y);
						}
					}
					
				}
				return true;
			}
		}
		return false;
	}
	this.presetPath = function () {
		try {
		var presetType = arguments[arguments.length - 1];
		
		if (presetType < 0 || presetType > 5)
			throw new Error("Given invalid preset type: " + presetType);
			
		for (var l = 0; l < arguments.length - 1; l++) {
			var presetTile = getPresetUnits(me.area, presetType, arguments[l]);
				
			if ((presetTile.length == 0))
				continue;
							
			if (presetTile.length == 0)
				throw new Error("Unable to find preset for id " + arguments[l]);

			this.moveTo(presetTile[0]);
				
			if (presetType == 5)
				this.takeTile(arguments[l]);
				
			return true;
		}
		
		throw new Error("Given invalid preset.");
		
		} catch(e) {
			print("ÿc5mBot ÿc#::ÿc0 Pathing Preset Error:ÿc3 " + e);
		}
		return false;
	}
	
	this.takeTile = function (tileId) {
		try
		{
			//Obtain the unit for the tile and store old area
			if (arguments.length > 1)
				var tileUnit = getUnit(arguments[1], tileId);
			else
				var tileUnit = getUnit(5, tileId);
			var oldArea = me.area;
			
			//Insure we have the unit
			if (!tileUnit)
				throw new Error("ÿc5mBot ÿc#::ÿc0 Pather.takeTile was given an invalid tile.")
				
			//Keep trying to go thru the tile until area changes
			while(oldArea == me.area)
			{
				//Walk to the tile
				this.moveTo(tileUnit);
				
				//Interact or click the tile
				tileUnit.interact ();	
				
				//Give bot time to actually go thru
				delay(500,true);
			}
			print("ÿc5mBot ÿc#::ÿc0 Entered " + getArea(me.area).name);
			
		} catch (e) {
			print("ÿc5mBot ÿc#::ÿc0 Tile Taking Error:ÿc3 " + e);
		}
		return;
	}
	
	this.moveNode = function(x, y, useTele) {
		/*if (getDistance(me, x, y) > ((useTele) ? 35 : 20))
			return false;
			
		if (checkCollision(me.area, x, y) != 0)
			return false;*/
		
		//Determine which way were clicking
		var click = (useTele) ? ClickType.Right : ClickType.Left;
		
		//Set teleport if we need it
		if (useTele)
			me.setSkill(Skill.Teleport, Hand.Right);
			
		var nFailed = -1;
		
		//Loop until were at the node!
		while(getDistance(me, x, y) > ((arguments.length == 4) ? 5: 2)) {
		
			if (!D2MB.inTown ())
				this.useDoors ();
			nFailed += 1
			//Click!
			clickMap(click.Down, Shift.Off, x, y);
			delay(50,true);
			clickMap(click.Up, Shift.Off, x, y);
			
			//Wait for the end of the move
			delay(30,true);
			while(!D2MB.checkMode(Mode.Player.Group.Neutral))
				delay(5,true);
				
			if (nFailed > 3)
				return false;
				
		}
		return true;
	}
	
	this.moveTo = function(pointTo) {
		//Determine if we should teleport, and if the range we will move
		this.useTele = (!D2MB.inTown() && me.getSkill(Skill.Teleport, 3)) ? true : false;
		this.range = (this.useTele) ? 35 : 20;
		
			
		if (pointTo.hasOwnProperty('roomx')) {
			var point = {};
			point.x = (pointTo.roomx * 5) + pointTo.x;
			point.y = (pointTo.roomy * 5) + pointTo.y;
			pointTo = point;
		}
		
		//Loop until were there!
		var scrhook = new Array ();
		
		while(getDistance(me, pointTo.x, pointTo.y) > this.range) {
			//Get the path to the end node!!
			var path = getPath(me.area, me.x, me.y, pointTo.x, pointTo.y, this.useTele, this.range);
				
			//Loop the nodes!
			var n = 0;
			for (n = 0; n < path.length; n++) {
				if (!this.moveNode(path[n][0], path[n][1], this.useTele))
					break;
			}
			
			//Decrease the range if we can't get there
			if (n != path.length) {
				this.range -= 2;
			}
		}
		//Move to the end node.
		this.moveNode(pointTo.x, pointTo.y, this.useTele);
	}
	
	this.monsterPath = function(unit, type) {
		this.useTele = (!D2MB.inTown() && me.getSkill(Skill.Teleport, 3)) ? true : false;
		this.range = (this.useTele) ? 35 : 20;
		
		var path = getPath(me.area, me.x, me.y, unit.x, unit.y, this.useTele, this.range);
		
		//Only need LOS
		if (type == 1)
			path.pop ();
		
		for (var n in path) {
			this.moveNode(path[n][0], path[n][1], this.useTele, true);
		}
		
	}
	
	this.useDoors = function () {
		var door = getUnit(2);
		do {
			if (!door)
				continue;
				
			if (getDistance(me, door) > 4)
				continue;
				
			if (door.name != "Door")
				continue;
				
			if (door.mode == Mode.Object.Opened)
				continue;
				
			clickMap(ClickType.Left.Down, Shift.Off, door);
			delay(50,true);
			clickMap(ClickType.Left.Up, Shift.Off, door);
			return;
		} while(door && door.getNext ());
	}
}