js_strict(true);

include("constants.dbl");
include("pather.dbl");
include("attack.dbl");
include("d2mb.dbl");
include("configurationmanager.dbl"); // rename this file
include("skill.dbl");

// Define my builds.
var BuildXML = new ConfigurationManager("builds.xml");
var MyBuilds = new Builds(BuildXML.store.config[0][1].build);
	
// Define my sequences.	
var SequenceXML = new ConfigurationManager("sequences.xml");
var MySequences = new Sequences(SequenceXML.store.config[0][1].sequence);

function main()
{
	MySequences.execute("mephisto");
}

// START OF SEQUENCE CODE

function Sequences(sequences)
{
	this.Sequences = {};
	
	this.init = function() {
		for ( var item = 0; item < sequences.length; item++ )
		{
			var sequence = new Sequence(sequences[item]);
			this.Sequences[sequence.Name] = sequence;
		}
	}

	/*this.get = function(name) {
		return this.sequences[name];
	}*/ 
	
	this.execute = function(name) {
		
		for ( var instruction = 0; instruction < this.Sequences[name].Commands.Path.length; instruction++ )
		{
			var type = this.Sequences[name].Commands.Path[instruction].type;
			var value = this.Sequences[name].Commands.Path[instruction].value;
			print("Executing: ÿc1" + type + "ÿc0 with value(s) ÿc2" + value.toString() + "ÿc0.");
			switch(String(type))
			{
				case "waypoint":
					D2MB.takeWp(Number(value[0]));
					break;
				case "exit":
					var goThru = (String(value[1]).toLowerCase().charAt(0) == "t") ? true : false;
					Pather.exitPath(Number(value[0]), goThru);
					break;
				case "point":
					var point = {};
					point.x = Number(value[0]);
					point.y = Number(value[1]);
					var walkPath = (String(value[2]).toLowerCase().charAt(0) == "t") ? true : false;
					Pather.moveTo(point, walkPath);
					break;
				case "attack":
					var unit = getUnit(1, String(value[0]));
					if (unit) {	Attack.attack(MyBuilds.get(MyBuilds.findMyBuild()).attackseq[0],unit); }
					break;
				default:
					print("Could not find instruction set for type 'ÿc1" + type + "ÿc0'.");
					break;
			}
		}
	}
	
	this.init();
}

function Sequence(sequence)
{
	this.Name = sequence[0].key;
	this.Commands = { Town:[], Path:[] };
	for ( var command = 0; command < sequence[1].path.length; command++ )
	{
			var type = sequence[1].path[command][0].type;
			var value = sequence[1].path[command][0].value.split(",");
			this.Commands.Path.push(new SequenceCommand(type,value));
	}
}

function SequenceCommand(type, value)
{
	this.type = type;
	this.value = value;
}

// END OF SEQUENCE CODE

// todo: I should eventually make this code readable, maybe some kind of better object handling.
// also i need to move it ;)

function Builds(builds) {
	this.builds = {};

	this.init = function() {
		for ( var item = 0; item < builds.length; item++ )
		{	
			var build = new Build(builds[item]);
			this.builds[build.name] = build;
		}
	}
	
	this.init();

	this.get = function(name) {
		return this.builds[name];
	}
	
	this.findMyBuild = function() {
		var buildscore = {};
		var bestscore = 0;
		var bestbuild = -1;
		
		for ( build in this.builds ) {
			var size = 0;
			buildscore[build] = 0;
			for each ( skill in this.builds[build].settings ) {
				var skill = new PlayerSkill(Number(skill));
				buildscore[build] += skill.getLevel();
				size++;
			}
			buildscore[build] /= size;
		}

		for (score in buildscore) {
			if (buildscore[score] > bestscore) {
				bestscore = buildscore[score];
				bestbuild = score;
			}
		}
		
		return bestbuild;
	}
}

// Todo: Make some damn error catching. I also want to clean this up, it's pretty ugly... I should just make some type of interface for all these damn 2d arrays.

function Build(build) {

	this.name = build[0].key;
	this.settings = [];
	this.attackseq = [];

	var primary = [];
	var range;
	
	range = build[1].attack[0][1].setting[0][0].value;
	primary[0] = build[1].attack[0][1].setting[1][0].left;
	primary[1] = build[1].attack[0][1].setting[1][0].right;
	
	this.attackseq[0] = new AttackSequence(range,primary);
	
	for ( var attr = 0; attr < build[1].setting.length; attr++ )
	{
		this.settings[build[1].setting[attr][0].key] = build[1].setting[attr][0].value;
	}
}